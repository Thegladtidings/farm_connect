"use client";

import { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { createActor } from "../../../declarations/farm_connect_backend"; // âœ… generated by dfx
import { canisterId } from "../../../declarations/farm_connect_backend";   // âœ… auto-injected
import "./LoginPage.css";

const LoginPage = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    email: "",
    password: "",
    walletAddress: "",
  });
  const [loginMethod, setLoginMethod] = useState("email");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleInputChange = (field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    try {
      if (loginMethod === "email") {
        if (formData.email && formData.password) {
          // âœ… Use generated actor
          const actor = createActor(canisterId, {
            agentOptions: {
              host: "http://127.0.0.1:4943", // for local development
            },
          });

          const success = await actor.login(formData.email, formData.password);

          if (success) {
            const userType = formData.email.includes("farmer") ? "farmer" : "consumer";
            localStorage.setItem("userType", userType);
            localStorage.setItem("isLoggedIn", "true");

            if (userType === "farmer") {
              navigate("/farmer/dashboard");
            } else {
              navigate("/marketplace");
            }
          } else {
            setError("Invalid email or password");
          }
        }
      } else if (loginMethod === "wallet" && formData.walletAddress) {
        localStorage.setItem("userType", "consumer");
        localStorage.setItem("isLoggedIn", "true");
        navigate("/marketplace");
      }
    } catch (err) {
      console.error("Login failed:", err);
      setError("Something went wrong. Please try again.");
    }

    setLoading(false);
  };

  return (
    <div className="login-page">
      <div className="login-container">
        <div className="login-header">
          <Link to="/" className="logo">
            <span className="logo-icon">ðŸŒ±</span>
            <span className="logo-text">FarmChain</span>
          </Link>
          <h1 className="login-title">Welcome Back</h1>
          <p className="login-subtitle">Sign in to your FarmChain account</p>
        </div>

        <div className="login-card">
          <div className="card-header">
            <h2 className="card-title">Sign In</h2>
            <p className="card-description">
              Access your account using email or wallet authentication
            </p>
          </div>

          <div className="card-content">
            <div className="login-method-selector">
              <button
                type="button"
                className={`method-btn ${loginMethod === "email" ? "active" : ""}`}
                onClick={() => setLoginMethod("email")}
              >
                ðŸ“§ Email
              </button>
              <button
                type="button"
                className={`method-btn ${loginMethod === "wallet" ? "active" : ""}`}
                onClick={() => setLoginMethod("wallet")}
              >
                ðŸ’³ Wallet
              </button>
            </div>

            <form onSubmit={handleSubmit} className="login-form">
              {error && <div className="error-message">{error}</div>}

              {loginMethod === "email" ? (
                <>
                  <div className="form-group">
                    <label htmlFor="email" className="label">
                      Email Address
                    </label>
                    <input
                      id="email"
                      type="email"
                      placeholder="Enter your email"
                      className="input"
                      value={formData.email}
                      onChange={(e) => handleInputChange("email", e.target.value)}
                      required
                    />
                  </div>
                  <div className="form-group">
                    <label htmlFor="password" className="label">
                      Password
                    </label>
                    <input
                      id="password"
                      type="password"
                      placeholder="Enter your password"
                      className="input"
                      value={formData.password}
                      onChange={(e) => handleInputChange("password", e.target.value)}
                      required
                    />
                  </div>
                </>
              ) : (
                <div className="form-group">
                  <label htmlFor="walletAddress" className="label">
                    ICP Wallet Address
                  </label>
                  <input
                    id="walletAddress"
                    placeholder="Enter your ICP wallet address"
                    className="input"
                    value={formData.walletAddress}
                    onChange={(e) => handleInputChange("walletAddress", e.target.value)}
                    required
                  />
                  <p className="input-help">
                    Connect your ICP wallet to authenticate securely
                  </p>
                </div>
              )}

              <button type="submit" className="btn btn-primary btn-full" disabled={loading}>
                {loading
                  ? loginMethod === "email"
                    ? "Signing in..."
                    : "Connecting..."
                  : loginMethod === "email"
                  ? "Sign In"
                  : "Connect Wallet"}
              </button>
            </form>

            {loginMethod === "email" && (
              <div className="forgot-password">
                <Link to="/forgot-password" className="forgot-link">
                  Forgot your password?
                </Link>
              </div>
            )}

            <div className="signup-link">
              <p>
                Don't have an account?{" "}
                <Link to="/register" className="link">
                  Sign up here
                </Link>
              </p>
            </div>

            <div className="blockchain-info">
              <div className="info-header">
                <span className="info-icon">ðŸ’³</span>
                <span className="info-title">Blockchain Security</span>
              </div>
              <p className="info-text">
                Your account is secured by ICP blockchain technology. All transactions are
                transparent and immutable.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;
